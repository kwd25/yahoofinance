name: Ingest

on:
  workflow_dispatch:
  schedule:
    - cron: "45 1 * * 2-6"   # run after market close 

jobs:
  ingest:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        shard: [0, 1, 2, 3]   

    steps:
      - uses: actions/checkout@v4

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install yfinance pandas requests lxml databricks-sql-connector

      - name: Start & wait for SQL Warehouse
        env:
          DATABRICKS_SERVER:       ${{ secrets.DATABRICKS_SERVER }}
          DATABRICKS_TOKEN:        ${{ secrets.DATABRICKS_TOKEN }}
          DATABRICKS_WAREHOUSE_ID: ${{ secrets.DATABRICKS_WAREHOUSE_ID }}
        run: |
          set -e
          SERVER="${DATABRICKS_SERVER#https://}"; SERVER="${SERVER#http://}"; SERVER="${SERVER%%/}"

          echo "Starting warehouse ${DATABRICKS_WAREHOUSE_ID}..."
          curl -fsS -X POST -H "Authorization: Bearer ${DATABRICKS_TOKEN}" \
            "https://${SERVER}/api/2.0/sql/warehouses/${DATABRICKS_WAREHOUSE_ID}/start" || true

          echo "Waiting for RUNNING..."
          for i in $(seq 1 60); do
            STATE=$(curl -fsS -H "Authorization: Bearer ${DATABRICKS_TOKEN}" \
              "https://${SERVER}/api/2.0/sql/warehouses/${DATABRICKS_WAREHOUSE_ID}" | \
              python - <<'PY'import sys, json; print(json.load(sys.stdin).get("state","").upper())PY)
            echo "State: ${STATE}"
            if [ "$STATE" = "RUNNING" ]; then
              echo "Warehouse is RUNNING."
              exit 0
            fi
            sleep 10
          done
          echo "Timed out waiting for RUNNING."
          exit 1


      - name: Run ingest shard
        env:
          # --- Databricks ---
          DATABRICKS_SERVER:    ${{ secrets.DATABRICKS_SERVER }}
          DATABRICKS_HTTP_PATH: ${{ secrets.DATABRICKS_HTTP_PATH }}
          DATABRICKS_TOKEN:     ${{ secrets.DATABRICKS_TOKEN }}

          # --- Symbol loading / sharding ---
          SYMBOL_SOURCE: "sp500"
          SHARDS: "4"
          SHARD_INDEX: "${{ matrix.shard }}"
          MIN_SYMBOLS_SHARD: "80"             # guard: ~500/4 = ~125 a safe floor

          # --- Backfill window (one-time big run) ---
          BACKFILL_YEARS: "10"         

          # --- Performance knobs ---
          WORKERS: "10"                       
          FETCH_TIMEOUT: "90"                 
          BATCH_ROWS: "5000"                  

          # --- Logging ---
          DEBUG: "0"
          VALIDATE_ONLY: "0"

        run: |
          python ingest.py


      - name: Run preprocessing (Silver + Gold)
        if: ${{ matrix.shard == 0 }}     
        env:
          DATABRICKS_SERVER:    ${{ secrets.DATABRICKS_SERVER }}
          DATABRICKS_HTTP_PATH: ${{ secrets.DATABRICKS_HTTP_PATH }}
          DATABRICKS_TOKEN:     ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          python preprocess.py
